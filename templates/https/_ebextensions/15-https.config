container_commands:
  # Install certbot if not yet installed
  10-install-certbot-and-certificates:
    command: |
      if [[ ! -f /usr/local/bin/certbot-auto ]]; then
        wget https://dl.eff.org/certbot-auto
        mv certbot-auto /usr/local/bin/certbot-auto
        chown root /usr/local/bin/certbot-auto
        chmod 0755 /usr/local/bin/certbot-auto
        # Amazon Linux require `--debug` option, because it is still experimental.
        /usr/local/bin/certbot-auto --debug --install-only --non-interactive
      fi
  # Install certbot account credentials from S3 if not exist on server
  # If not exists on S3 either, then create it and put it on S3.
  20-install-certbot-account-credentials:
    command: |
      FRONT_SITE_VIRTUAL_HOST_CONFIG=${EB_APP_ENV}-frontend-site.conf
      ADMIN_SITE_VIRTUAL_HOST_CONFIG=${EB_APP_ENV}-backend-site.conf

      # Get target domain names.
      SITE_DOMAIN=$(grep server_name /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG} | sed 's/server_name \(.*\);/\1/g')
      ADMIN_DOMAIN=$(grep server_name /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG} | sed 's/server_name \(.*\);/\1/g')

      # Set variables in .env as environmental variables including AWS credentials enabling aws cli to use
      export $(cat .env | grep -v ^# | xargs)

      if [[ ! -d /etc/letsencrypt ]]; then
        aws s3 cp s3://${AWS_S3_BUCKET}/private/letsencrypt.zip /tmp/
        RESULT=$?
        if [ $RESULT == 0 ]; then
          # letsencrypt.zip downloaded
          unzip /tmp/letsencrypt.zip
          mv letsencrypt /etc/letsencrypt
          echo "Let's encrypt credentials retrieved from S3."
        fi
      fi

      if [[ -d /etc/letsencrypt ]]; then
        echo "Let's Encrypt credentials exist. Modifying Nginx virtual host config files for HTTPS."

        # Modify Nginx virtual host configurations
        # Amazon Linux require `--debug` option, because it is still experimental.
        /usr/local/bin/certbot-auto --debug --nginx --no-bootstrap --non-interactive --agree-tos --redirect --reinstall -d $SITE_DOMAIN -d $ADMIN_DOMAIN -m kanji.furuhashi@spycetek.com
      else
        echo "Let's Encrypt credentials do NOT exist. Obtain new certificates."

        # Obtain certificates and install (modify Nginx config files).
        # Amazon Linux require `--debug` option, because it is still experimental.
        /usr/local/bin/certbot-auto --debug --nginx --no-bootstrap --non-interactive --agree-tos --redirect -d $SITE_DOMAIN -d $ADMIN_DOMAIN -m kanji.furuhashi@spycetek.com

        # Add post-successful-renewal script to hook directory
        cp .ebextensions/files/save_tsl_credentials_to_s3.sh /etc/letsencrypt/renewal-hooks/deploy/save_to_s3.sh
        chmod a+x /etc/letsencrypt/renewal-hooks/deploy/save_to_s3.sh

        # Save generated credentials to S3.
        cd /etc && zip -r /tmp/letsencrypt.zip letsencrypt
        aws s3 cp /tmp/letsencrypt.zip s3://${AWS_S3_BUCKET}/private/letsencrypt.zip
        rm -f /tmp/letsencrypt.zip
      fi

      # Save modified config files to S3, just for reference.
      aws s3 cp /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG} s3://${AWS_S3_BUCKET}/private/${FRONT_SITE_VIRTUAL_HOST_CONFIG}
      aws s3 cp /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG} s3://${AWS_S3_BUCKET}/private/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}


# Configuration for automatic certificate update
files:
  # cron configuration for auto renewal
  "/var/spool/cron/nginx":
    mode: "000400"
    owner: nginx
    group: nginx
    content: |
      0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && /usr/local/bin/certbot-auto renew
