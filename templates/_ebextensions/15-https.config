container_commands:
  # Install certbot if not yet installed
  10-install-certbot-and-certificates:
    command: |
      if [[ ! -f /usr/local/bin/certbot-auto ]]; then
        wget https://dl.eff.org/certbot-auto
        mv certbot-auto /usr/local/bin/certbot-auto
        chown root /usr/local/bin/certbot-auto
        chmod 0755 /usr/local/bin/certbot-auto
        # Amazon Linux require `--debug` option, because it is still experimental.
        /usr/local/bin/certbot-auto --debug --install-only --non-interactive
      fi
  # Install certbot account credentials from S3 if not exist on server
  # If not exists on S3 either, then create it and put it on S3.
  20-install-certbot-account-credentials:
    command: |
      FRONT_SITE_VIRTUAL_HOST_CONFIG=${EB_APP_ENV}-frontend-site.conf
      ADMIN_SITE_VIRTUAL_HOST_CONFIG=${EB_APP_ENV}-backend-site.conf

      if [[ ! -f /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG} || ! -f /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG} ]]; then
        echo "ERROR: ${FRONT_SITE_VIRTUAL_HOST_CONFIG} and/or ${ADMIN_SITE_VIRTUAL_HOST_CONFIG} not exist in /etc/nginx/sites-available."
        exit 1
      fi

      set -x

      # Get target domain names.
      SITE_DOMAIN=$(grep server_name /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG} | sed 's/^.*server_name \(.*\);/\1/g')
      ADMIN_DOMAIN=$(grep server_name /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG} | sed 's/^.*server_name \(.*\);/\1/g')

      if [[ ! -d /etc/letsencrypt ]]; then
        aws s3 cp s3://${AWS_S3_BUCKET}/private/letsencrypt.zip /tmp/
        RESULT=$?
        if [ $RESULT == 0 ]; then
          # letsencrypt.zip downloaded
          unzip /tmp/letsencrypt.zip
          mv letsencrypt /etc/letsencrypt
          echo "Let's encrypt credentials retrieved from S3."
        fi
      fi

      # Clear temp dir
      TMP_DIR=/tmp/nginx_conf_update
      rm -rf ${TMP_DIR}
      mkdir -p ${TMP_DIR}

      cp /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG} ${TMP_DIR}/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.new.orig
      cp /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG} ${TMP_DIR}/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.new.orig

      if [[ -d /etc/letsencrypt ]]; then
        echo "Let's Encrypt credentials exist. Modifying Nginx virtual host config files for HTTPS."

        S3_RET_CODE=0
        # If no modified .conf is saved, or saved original .conf is different from new one, update
        aws s3 cp s3://${AWS_S3_BUCKET}/private/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.mod ${TMP_DIR}/
        (( S3_RET_CODE = S3_RET_CODE + $? )) # $? is 0: file exist, 1: file not found
        aws s3 cp s3://${AWS_S3_BUCKET}/private/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.mod ${TMP_DIR}/
        (( S3_RET_CODE = S3_RET_CODE + $? ))
        aws s3 cp s3://${AWS_S3_BUCKET}/private/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.orig ${TMP_DIR}/
        (( S3_RET_CODE = S3_RET_CODE + $? ))
        aws s3 cp s3://${AWS_S3_BUCKET}/private/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.orig ${TMP_DIR}/
        (( S3_RET_CODE = S3_RET_CODE + $? ))

        if (( S3_RET_CODE == 0 )); then # If all of 4 files above successfully downloaded
          CMP_RET_CODE=0
          cmp ${TMP_DIR}/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.new.orig ${TMP_DIR}/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.orig
          (( CMP_RET_CODE = CMP_RET_CODE + $? )) # $? is 0: same, 1: differ
          cmp ${TMP_DIR}/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.new.orig ${TMP_DIR}/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.orig
          (( CMP_RET_CODE = CMP_RET_CODE + $? ))

          if (( CMP_RET_CODE == 0 )); then # If none of orig changed
            # Use downloaded modified config files
            echo "Using saved Nginx config files modified by certbot. Certbot will not do anything this time."
            mv ${TMP_DIR}/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.mod /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG}
            mv ${TMP_DIR}/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.mod /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}
            exit 0
          else
            echo "Nginx config files in the source code have updates. Certbot will modify these new config files."
          fi
        else
          echo "All or some of saved Nginx config files are not found. Certbot will modify config files in the source code."
        fi

        # Modify Nginx virtual host configurations
        # Amazon Linux require `--debug` option, because it is still experimental.
        /usr/local/bin/certbot-auto --debug --nginx --no-bootstrap --non-interactive --agree-tos --redirect --reinstall -d $SITE_DOMAIN -d $ADMIN_DOMAIN -m kanji.furuhashi@spycetek.com
      else
        echo "Let's Encrypt credentials do NOT exist. Obtain new certificates."

        # Obtain certificates and install (modify Nginx config files).
        # Amazon Linux require `--debug` option, because it is still experimental.
        /usr/local/bin/certbot-auto --debug --nginx --no-bootstrap --non-interactive --agree-tos --redirect -d $SITE_DOMAIN -d $ADMIN_DOMAIN -m kanji.furuhashi@spycetek.com

        # Add post-successful-renewal script to hook directory
        cp .ebextensions/files/save_tsl_credentials_to_s3.sh /etc/letsencrypt/renewal-hooks/deploy/save_to_s3.sh
        chmod a+x /etc/letsencrypt/renewal-hooks/deploy/save_to_s3.sh

        # Save generated credentials to S3.
        cd /etc && zip -r /tmp/letsencrypt.zip letsencrypt
        aws s3 cp /tmp/letsencrypt.zip s3://${AWS_S3_BUCKET}/private/letsencrypt.zip
        rm -f /tmp/letsencrypt.zip
      fi

      CMP_RET_CODE=0
      cmp ${TMP_DIR}/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.new.orig /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG}
      (( CMP_RET_CODE = CMP_RET_CODE + $? )) # $? is 0: same, 1: differ
      cmp ${TMP_DIR}/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.new.orig /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}
      (( CMP_RET_CODE = CMP_RET_CODE + $? ))

      if (( CMP_RET_CODE != 0 )); then # If actually modified
        echo "Certbot updated the new Nginx config files. Updating the original config and modified ones on S3."
        # Save new original config files to S3
        aws s3 cp ${TMP_DIR}/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.new.orig s3://${AWS_S3_BUCKET}/private/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.orig
        aws s3 cp ${TMP_DIR}/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.new.orig s3://${AWS_S3_BUCKET}/private/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.orig

        # Save modified config files to S3
        aws s3 cp /etc/nginx/sites-available/${FRONT_SITE_VIRTUAL_HOST_CONFIG} s3://${AWS_S3_BUCKET}/private/${FRONT_SITE_VIRTUAL_HOST_CONFIG}.mod
        aws s3 cp /etc/nginx/sites-available/${ADMIN_SITE_VIRTUAL_HOST_CONFIG} s3://${AWS_S3_BUCKET}/private/${ADMIN_SITE_VIRTUAL_HOST_CONFIG}.mod
      else
        echo "ERROR: Certbot didn't update the new Nginx config files."
      fi

# Configuration for automatic certificate update
files:
  # cron configuration for auto renewal
  "/var/spool/cron/nginx":
    mode: "000400"
    owner: nginx
    group: nginx
    content: |
      0 0,12 * * * python -c 'import random; import time; time.sleep(random.random() * 3600)' && /usr/local/bin/certbot-auto renew
